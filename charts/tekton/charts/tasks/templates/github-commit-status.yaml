---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: github-commit-status
  labels:
    {{- include "tasks.labels" . | nindent 4 }}
spec:
  description: >-
    This task sets the CI job status on GitHub ("api.github.com") commits with the given state.
  params:
  - name: REPO_FULL_NAME
    type: string
    description: "The GitHub repository full name, e.g.: octocat/hello-worId"
  - name: SHA
    type: string
    description: Commit SHA to set the status for.
  - name: STATE
    description: The state of the status. `error` | `failure` | `pending` | `success`
    type: string
  - name: DESCRIPTION
    type: string
    description: A short description of the status.
  - name: CONTEXT
    type: string
    description: >-
      The GitHub context, A string label to differentiate this status from
      the status of other systems. ie: "ci/tekton"
  - name: TARGET_URL
    type: string
    description: >-
      The target URL to associate with this status. This URL will be linked
      from the GitHub UI to allow users to easily see the source of the
      status.
  steps:
    - name: set-status
      image: badouralix/curl-jq
      env:
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.gitHubCommitStatusSecret }}
              key: token
      script: |
        #!/bin/sh

        # Construct the status URL
        STATUS_URL="https://api.github.com/repos/$(params.REPO_FULL_NAME)/statuses/$(params.SHA)"

        # Prepare the data payload
        DATA=$(jq -n \
          --arg state "$(params.STATE)" \
          --arg target_url "$(params.TARGET_URL)" \
          --arg description "$(params.DESCRIPTION)" \
          --arg context "$(params.CONTEXT)" \
          '{
            state: $state,
            target_url: $target_url,
            description: $description,
            context: $context
          }')

        echo "Body for API request: $DATA"

        AUTH_HEADER="Authorization: Bearer $GITHUB_TOKEN"

        # Send the request using curl
        RESPONSE=$(curl -s -w "%{http_code}" -o response.json \
          -X POST "$STATUS_URL" \
          -H "Accept: application/vnd.github+json" \
          -H "Content-Type: application/json" \
          -H "$AUTH_HEADER" \
          -H "User-Agent: Tekton CI" \
          -d "$DATA")

        # Extract HTTP status code from the response
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)

        # Check if the request was successful
        if [ "${HTTP_STATUS}" -ge 200 ] && [ "${HTTP_STATUS}" -lt 300 ]; then
          echo "GitHub status '$(params.STATE)' has been set on $(params.REPO_FULL_NAME)#$(params.SHA)"
        else
          echo "Error: $HTTP_STATUS"
          cat response.json
          exit 1
        fi