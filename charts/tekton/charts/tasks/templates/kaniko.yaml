apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
  labels:
    {{- include "tasks.labels" . | nindent 4 }}
spec:
  description: >-
    This Task builds a Dockerfile with kaniko and pushes the resulting image to a registry.
  params:
    - name: IMAGE_NAME
      description: Name of the image to build.
    - name: IMAGE_TAG
      description: Tag of the image to build.
    - name: CONTEXT
      description: The build context used by Kaniko.
      default: ./
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
  volumes:
    - name: secret-share
      emptyDir: {}
  steps:
    - name: create-docker-config
      image: alpine
      volumeMounts:
        - name: secret-share
          mountPath: /kaniko/.docker
      workingDir: /kaniko/.docker
      env:
        - name: REGISTRY_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.dockerConfigSecret }}
              key: username
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.dockerConfigSecret }}
              key: password
      script: |
        #!/bin/sh
        set +x
        echo '{"auths": {"https://index.docker.io/v1/": {"auth": "'$(echo -n "${REGISTRY_USERNAME}:${REGISTRY_PASSWORD}" | base64)'"}}}' > ./config.json
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:latest
      volumeMounts:
        - name: secret-share
          mountPath: /kaniko/.docker
      workingDir: $(workspaces.source.path)
      args:
        - --dockerfile=$(workspaces.source.path)/$(params.CONTEXT)/Dockerfile
        - --context=$(workspaces.source.path)/$(params.CONTEXT)
        - --destination=$(params.IMAGE_NAME):$(params.IMAGE_TAG)
      # Ensure kaniko runs as root, "securityContext" is required for platforms like OpenShift.
      securityContext:
        runAsUser: 0
